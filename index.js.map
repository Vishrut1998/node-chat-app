{"mappings":"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","sources":["src/index.js","src/utils/messages.js","src/utils/users.js"],"sourcesContent":["const path = require('path')\r\nconst http = require('http')\r\nconst express = require('express')\r\nconst socketio = require('socket.io')\r\nconst Filter = require('bad-words')\r\nconst { generateMessage, generateLocationMessage } = require('./utils/messages')\r\nconst { addUser, removeUser , getUser , getUsersInRoom } = require('./utils/users')\r\n\r\nconst app = express()\r\nconst server = http.createServer(app)\r\nconst io = socketio(server)\r\n\r\nconst port = process.env.PORT || 3000\r\nconst publicDirectoryPath = path.join(__dirname, '../public')\r\n\r\napp.use(express.static(publicDirectoryPath))\r\n\r\nio.on('connection', (socket) => {\r\n    console.log('New WebSocket connection')\r\n\r\n    socket.on('join', (options, callback) => {\r\n        const {error, user} = addUser({ id: socket.id, ...options })\r\n\r\n        if(error){\r\n            return callback(error)\r\n        }\r\n\r\n        socket.join(user.room)\r\n\r\n        socket.emit('message', generateMessage('Admin','Welcome!'))\r\n        socket.broadcast.to(user.room).emit('message', generateMessage('Admin',`${user.username} has joined!`))\r\n        io.to(user.room).emit('roomData', {\r\n            room: user.room,\r\n            users: getUsersInRoom(user.room)\r\n        })\r\n\r\n        callback()\r\n\r\n        // socket.emit, io.emit, socket.broadcast.emit\r\n        // io.to.emit, socket.broadcast.to.emit\r\n    })\r\n\r\n    socket.on('sendMessage', (message, callback) => {\r\n        const user = getUser(socket.id)\r\n        const filter = new Filter()\r\n\r\n        if (filter.isProfane(message)) {\r\n            return callback('Profanity is not allowed!')\r\n        }\r\n\r\n        io.to(user.room).emit('message', generateMessage(user.username,message))\r\n        callback()\r\n    })\r\n\r\n    socket.on('sendLocation', (coords, callback) => {\r\n        const user = getUser(socket.id)\r\n        io.to(user.room).emit('locationMessage', generateLocationMessage(user.username,`https://google.com/maps?q=${coords.latitude},${coords.longitude}`))\r\n        callback()\r\n    })\r\n\r\n    socket.on('disconnect', () => {\r\n        const user = removeUser(socket.id)\r\n        if(user){\r\n            io.to(user.room).emit('message', generateMessage('Admin', `${user.username} has left!`))\r\n            io.to(user.room).emit('roomData',{\r\n                room:user.room,\r\n                users: getUsersInRoom(user.room)\r\n            })\r\n        }\r\n    })\r\n})\r\n\r\nserver.listen(port, () => {\r\n    console.log(`Server is up on port ${port}!`)\r\n})","const generateMessage = (username,text) => {\r\n    return {\r\n        username,\r\n        text,\r\n        createdAt: new Date().getTime()\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst generateLocationMessage = (username, url) => {\r\n    return {\r\n        username,\r\n        url,\r\n        createdAt: new Date().getTime()\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    generateMessage,\r\n    generateLocationMessage\r\n}","const users = []\r\n\r\n//addUser, removeUser, gettUser, getUsersInRoom\r\n\r\nconst addUser = ({ id, username, room }) => {\r\n    //Clean the data\r\n    username = username.trim().toLowerCase()\r\n    room = room.trim().toLowerCase()\r\n\r\n    // Validate the data\r\n\r\n    if (!username || !room) {\r\n        return {\r\n            error: 'Username and Room are required'\r\n        }\r\n\r\n    }\r\n\r\n    // Check for existing user\r\n\r\n    const existingUser = users.find((user) => {\r\n        return user, room === room && user.username === username\r\n    })\r\n\r\n    // Validate username\r\n    if (existingUser) {\r\n        return {\r\n            error: 'Username is in use!'\r\n        }\r\n    }\r\n\r\n    //Store the User\r\n    const user = { id, username, room }\r\n    users.push(user)\r\n    return { user }\r\n\r\n}\r\n//remove user\r\nconst removeUser = (id) => {\r\n    const index = users.findIndex((user) => user.id === id)\r\n\r\n    if (index !== -1) {\r\n        return users.splice(index, 1)[0]\r\n    }\r\n\r\n}\r\n//Get Users\r\nconst getUser = (id) => {\r\n    return users.find((user) => user.id === id)\r\n}\r\n//Get users from room\r\nconst getUsersInRoom = (room) => {\r\n    room = room.trim().toLowerCase()\r\n    return users.filter((user) => user.room === room)\r\n}\r\n\r\nmodule.exports = {\r\n    addUser,\r\n    removeUser,\r\n    getUser,\r\n    getUsersInRoom\r\n}"],"names":[],"version":3,"file":"index.js.map"}