{"mappings":"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","sources":["src/index.js","src/utils/messages.js","src/utils/users.js"],"sourcesContent":["const path = require('path')\nconst http = require('http')\nconst express = require('express')\nconst socketio = require('socket.io')\nconst Filter = require('bad-words')\nconst { generateMessage, generateLocationMessage } = require('./utils/messages')\nconst { addUser, removeUser , getUser , getUsersInRoom } = require('./utils/users')\n\nconst app = express()\nconst server = http.createServer(app)\nconst io = socketio(server)\n\nconst port = process.env.PORT || 3000\nconst publicDirectoryPath = path.join(__dirname, '../public')\n\napp.use(express.static(publicDirectoryPath))\n\nio.on('connection', (socket) => {\n    console.log('New WebSocket connection')\n\n    socket.on('join', (options, callback) => {\n        const {error, user} = addUser({ id: socket.id, ...options })\n\n        if(error){\n            return callback(error)\n        }\n\n        socket.join(user.room)\n\n        socket.emit('message', generateMessage('Admin','Welcome!'))\n        socket.broadcast.to(user.room).emit('message', generateMessage('Admin',`${user.username} has joined!`))\n        io.to(user.room).emit('roomData', {\n            room: user.room,\n            users: getUsersInRoom(user.room)\n        })\n\n        callback()\n\n        // socket.emit, io.emit, socket.broadcast.emit\n        // io.to.emit, socket.broadcast.to.emit\n    })\n\n    socket.on('sendMessage', (message, callback) => {\n        const user = getUser(socket.id)\n        const filter = new Filter()\n\n        if (filter.isProfane(message)) {\n            return callback('Profanity is not allowed!')\n        }\n\n        io.to(user.room).emit('message', generateMessage(user.username,message))\n        callback()\n    })\n\n    socket.on('sendLocation', (coords, callback) => {\n        const user = getUser(socket.id)\n        io.to(user.room).emit('locationMessage', generateLocationMessage(user.username,`https://google.com/maps?q=${coords.latitude},${coords.longitude}`))\n        callback()\n    })\n\n    socket.on('disconnect', () => {\n        const user = removeUser(socket.id)\n        if(user){\n            io.to(user.room).emit('message', generateMessage('Admin', `${user.username} has left!`))\n            io.to(user.room).emit('roomData',{\n                room:user.room,\n                users: getUsersInRoom(user.room)\n            })\n        }\n    })\n})\n\nserver.listen(port, () => {\n    console.log(`Server is up on port ${port}!`)\n})","const generateMessage = (username,text) => {\n    return {\n        username,\n        text,\n        createdAt: new Date().getTime()\n\n    }\n\n\n}\n\nconst generateLocationMessage = (username, url) => {\n    return {\n        username,\n        url,\n        createdAt: new Date().getTime()\n    }\n}\n\nmodule.exports = {\n    generateMessage,\n    generateLocationMessage\n}","const users = []\n\n//addUser, removeUser, gettUser, getUsersInRoom\n\nconst addUser = ({ id, username, room }) => {\n    //Clean the data\n    username = username.trim().toLowerCase()\n    room = room.trim().toLowerCase()\n\n    // Validate the data\n\n    if (!username || !room) {\n        return {\n            error: 'Username and Room are required'\n        }\n\n    }\n\n    // Check for existing user\n\n    const existingUser = users.find((user) => {\n        return user, room === room && user.username === username\n    })\n\n    // Validate username\n    if (existingUser) {\n        return {\n            error: 'Username is in use!'\n        }\n    }\n\n    //Store the User\n    const user = { id, username, room }\n    users.push(user)\n    return { user }\n\n}\n//remove user\nconst removeUser = (id) => {\n    const index = users.findIndex((user) => user.id === id)\n\n    if (index !== -1) {\n        return users.splice(index, 1)[0]\n    }\n\n}\n//Get Users\nconst getUser = (id) => {\n    return users.find((user) => user.id === id)\n}\n//Get users from room\nconst getUsersInRoom = (room) => {\n    room = room.trim().toLowerCase()\n    return users.filter((user) => user.room === room)\n}\n\nmodule.exports = {\n    addUser,\n    removeUser,\n    getUser,\n    getUsersInRoom\n}"],"names":[],"version":3,"file":"index.js.map"}